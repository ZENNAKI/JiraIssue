{namespace JIRA.Templates.Setup.Database}

/**
 * First step of setup process - database setup
 *
 * @param databaseMessagesContent
 * @param databaseOptions
 * @param dbTestSuccessful
 * @param errors
 * @param externalDatabases
 * @param fieldValues
 * @param globalErrors
 * @param helpPaths
 * param importOptions
 * @param modifierKey
 * @param productName The name of the current JIRA product
 * param trackerSteps
 */
{template .page}
    {call JIRA.Templates.Setup.layout data="all"}
        {param bodyClasses: 'jira-setup-database-page' /}
        {param content}
            {call .pageContents data="all"/}
        {/param}
    {/call}
{/template}


/**
 * Renders the setup db page content
 * @param productName The name of the current JIRA product
 * @param errors
 * @param databaseOptions
 * @param helpPaths
 * @param modifierKey
 * @param globalErrors
 */
{template .pageContents}
    {let $formId: 'jira-setup-database' /}
    {let $idPrefix: $formId + '-' /}

    // keep in sync with .externalDbFields template
    {let $fieldPrefix: 'jira-setup-database-field-' /}


    <div class="jira-setup-global-messages">
        {call .globalMessages data="all" /}
    </div>
    {call aui.form.form}
        {param action: 'SetupDatabase.jspa' /}
        {param extraClasses: 'ajs-dirty-warning-exempt jira-setup-form' /}
        {param id: $formId /}
        {param content}
            <h2>
                {getText('setupdb.title')}
            </h2>
            {call aui.form.radioField}
                {param errorTexts: $errors['databaseOption'] /}
                {param fields: $databaseOptions /}
                {param legendContent: getText('setupdb.option.label') /}
                {param name: 'databaseOption' /}
                {param descriptionContent}
                    {let $link1: '<a href="' + $helpPaths.migration + '" target="_blank">' /}
                    {let $link2: '<a href="' + $helpPaths.external + '" target="_blank">' /}

                    {let $productNameHtml}{$productName}{/let}
                    {let $firstLineContent: getText('setupdb.external.desc.line1', $link1, '</a>') /}
                    {let $secondLineContent: getText('setupdb.external.desc.line2', $link2, $productNameHtml, '</a>') /}

                    {$firstLineContent|noAutoescape}
                    <br>
                    {$secondLineContent|noAutoescape}
                {/param}
            {/call}
            <div id="setup-db-external" class="hidden">
                {call .externalDbFields data="all" /}
            </div>
//                    {call aui.form.radioField}
//                        {param errorTexts: $errors['importOption'] /}
//                        {param fields: $importOptions /}
//                        {param legendContent: getText('setupdb.import.label') /}
//                        {param name: 'importOption' /}
//                    {/call}
            {call aui.form.buttons}
                {param content}
                    {call aui.form.input}
                        {param id: $fieldPrefix + 'testing-connection' /}
                        {param name: 'testingConnection' /}
                        {param type: 'hidden' /}
                        {param value: 'false' /}
                    {/call}
                    {call aui.form.submit}
                        {param id: $idPrefix + 'submit' /}
                        {param text: getText('common.words.next') /}
                        {param type: 'primary' /}
                        {param extraAttributes: [
                            'accesskey': getText('AUI.form.submit.button.accesskey'),
                            'title': getText('AUI.form.submit.button.tooltip', getText('AUI.form.submit.button.accesskey'), $modifierKey)
                        ] /}
                    {/call}
                    {call aui.form.button}
                        {param extraClasses: 'hidden' /}
                        {param id: $idPrefix + 'test-connection' /}
                        {param tagName: 'BUTTON' /}
                        {param text: getText('setupdb.testconnection') /}
                    {/call}
                    <div class="jira-setup-spinners">
                        <div class="submit-spinner hidden jira-setup-spinner">
                            <span class="aui-icon aui-icon-wait"></span>{sp}
                            {getText('setupdb.database.being.setup')}
                        </div>
                        <div class="test-connection-spinner hidden jira-setup-spinner">
                            <span class="aui-icon aui-icon-wait"></span>{sp}
                            {getText('setupdb.database.test.connection')}
                        </div>
                    </div>
                {/param}
            {/call}
        {/param}
    {/call}
{/template}

/**
 * Fields used to setup external database
 *
 * @param databaseMessagesContent
 * @param errors
 * @param externalDatabases
 * @param fieldValues
 */
{template .externalDbFields}
    // keep in sync with .page template
    {let $fieldPrefix: 'jira-setup-database-field-' /}

    {call aui.form.selectField}
        {param errorTexts: $errors['databaseType'] /}
        {param fieldWidth: 'large' /}
        {param id: $fieldPrefix + 'database-type' /}
        {param labelContent: getText('setupdb.databasetype.label') /}
        {param name: 'databaseType' /}
        {param options: $externalDatabases /}
    {/call}
    <div class="db-messages">
        {foreach $type in keys($databaseMessagesContent)}
            {call aui.message.success}
                {param extraClasses: 'hidden db-message db-type-' + $type /}
                {param content}
                    {$databaseMessagesContent[$type]|noAutoescape}
                {/param}
            {/call}
        {/foreach}
    </div>
    {call aui.form.textField}
        {param descriptionText: getText('setupdb.jdbcHostname.desc') /}
        {param errorTexts: $errors['jdbcHostname'] /}
        {param id: $fieldPrefix + 'hostname' /}
        {param labelContent: getText('setupdb.jdbcHostname') /}
        {param name: 'jdbcHostname' /}
        {param value: $fieldValues['jdbcHostname'] /}
    {/call}
    {call aui.form.textField}
        {param descriptionText: getText('setupdb.jdbcPort.desc') /}
        {param errorTexts: $errors['jdbcPort'] /}
        {param id: $fieldPrefix + 'port' /}
        {param labelContent: getText('setupdb.jdbcPort') /}
        {param name: 'jdbcPort' /}
        {param value: $fieldValues['jdbcPort'] /}
    {/call}
    {call aui.form.textField}
        {param descriptionText: getText('setupdb.jdbcDatabase.desc') /}
        {param errorTexts: $errors['jdbcDatabase'] /}
        {param extraClasses: 'db-type-mssql db-type-postgres72 db-type-mysql db-specific-field hidden' /}
        {param id: $fieldPrefix + 'database-name' /}
        {param labelContent: getText('setupdb.jdbcDatabase') /}
        {param name: 'jdbcDatabase' /}
        {param value: $fieldValues['jdbcDatabase'] /}
    {/call}
    {call aui.form.textField}
        {param descriptionText: getText('setupdb.jdbcSid.desc') /}
        {param errorTexts: $errors['jdbcSid'] /}
        {param extraClasses: 'db-type-oracle10g db-specific-field hidden' /}
        {param id: $fieldPrefix + 'sid' /}
        {param labelContent: getText('setupdb.jdbcSid') /}
        {param name: 'jdbcSid' /}
        {param value: $fieldValues['jdbcSid'] /}
    {/call}
    {call aui.form.textField}
        {param descriptionText: getText('setupdb.jdbcUsername.desc') /}
        {param errorTexts: $errors['jdbcUsername'] /}
        {param id: $fieldPrefix + 'username' /}
        {param labelContent: getText('setupdb.jdbcUsername') /}
        {param name: 'jdbcUsername' /}
        {param value: $fieldValues['jdbcUsername'] /}
    {/call}
    {call aui.form.passwordField}
        {param descriptionText: getText('setupdb.jdbcPassword.desc') /}
        {param errorTexts: $errors['jdbcPassword'] /}
        {param id: $fieldPrefix + 'password' /}
        {param labelContent: getText('setupdb.jdbcPassword') /}
        {param name: 'jdbcPassword' /}
        {param value: $fieldValues['jdbcPassword'] /}
    {/call}
    {call aui.form.textField}
        {param descriptionText: getText('setupdb.schemaName.desc') /}
        {param errorTexts: $errors['schemaName'] /}
        {param extraClasses: 'db-type-mssql db-type-postgres72 db-specific-field hidden' /}
        {param id: $fieldPrefix + 'schema' /}
        {param labelContent: getText('setupdb.schemaName') /}
        {param name: 'schemaName' /}
        {param value: $fieldValues['schemaName'] /}
    {/call}
{/template}

/**
 * Render global AUI messages for database setup
 *
 * @param dbTestSuccessful
 * @param globalErrors
 */
{template .globalMessages}
    {if $dbTestSuccessful}
        {call aui.message.success}
            {param content}
                {getText('setup.database.connection.test.successful')}
            {/param}
        {/call}
    {/if}
    {if length($globalErrors)}
        {call aui.message.error}
            {param content}
                {foreach $error in $globalErrors}
                    <p class="jira-setup-global-message-paragraph">{$error|noAutoescape}</p>
                {/foreach}
            {/param}
        {/call}
    {/if}
{/template}

/**
 * Render an AUI warning message saying that it is not possible to test database connection currently
 */
{template .unableToTestConnection}
    {call aui.message.warning}
        {param content}
            <p class="jira-setup-global-message-paragraph">{getText('setupdb.test.connection.unable.to.connect')}</p>
        {/param}
    {/call}
{/template}