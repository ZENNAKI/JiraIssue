JIRA.AvatarStore=Class.extend({TEMP_ID:"TEMP",init:function(options){if(!options.restQueryUrl){throw new Error("JIRA.AvatarStore.init: You must specify [restQueryUrl], The rest url for querying avatars (see class description)")}if(!options.restCreateTempUrl){throw new Error("JIRA.AvatarStore.init: You must specify [restCreateTempUrl], The rest url for creating a temporary avatar (see class description)")}if(!options.restUpdateTempUrl){throw new Error("JIRA.AvatarStore.init: You must specify [restUpdateTempUrl], The rest url for updating a temporary avatar (see class description)")}if(!options.defaultAvatarId){throw new Error("JIRA.AvatarStore.init: You must specify [defaultAvatarId] to the contructor so the store "+"knows what to select if you delete the selected one")}this.restQueryUrl=options.restQueryUrl;this.restUpdateUrl=options.restUpdateUrl;this.restCreateTempUrl=options.restCreateTempUrl;this.restUpdateTempUrl=options.restUpdateTempUrl;this.restSingleAvatarUrl=options.restSingleAvatarUrl;this.restParams=options.restParams||{};this.restParams.atl_token=atl_token();this.defaultAvatarId=options.defaultAvatarId;this.avatars={system:[],custom:[]}},_buildCompleteUrl:function(url){var completeUrl=url;if(this.restParams){var queryParams="";for(var name in this.restParams){queryParams+=AJS.format("&{0}={1}",encodeURIComponent(name),encodeURIComponent(this.restParams[name]))}completeUrl+=("?"+queryParams.substr(1))}return completeUrl},getById:function(avatarId){var match;jQuery.each(this.avatars.system,function(i,avatar){if(this.getId()===avatarId){match=avatar;return false}});if(!match){jQuery.each(this.avatars.custom,function(i,avatar){if(this.getId()===avatarId){match=avatar;return false}})}return match},isTempAvatar:function(avatar){return(avatar.getId()===this.TEMP_ID)},_selectAvatar:function(avatar){var selected=this.getSelectedAvatar();if(selected){selected.setUnSelected()}avatar.setSelected()},selectAvatar:function(avatar,options){var instance=this;if(!avatar){throw new Error("JIRA.AvatarStore.selectAvatar: Cannot select Avatar that does not exist")}if(this.restUpdateUrl){JIRA.SmartAjax.makeRequest({type:"PUT",contentType:"application/json",dataType:"json",url:this._buildCompleteUrl(this.restUpdateUrl),data:JSON.stringify(avatar.toJSON()),success:function(){instance._selectAvatar(avatar);if(options.success){options.success.call(this,avatar)}},error:options.error})}else{instance._selectAvatar(avatar);if(options.success){options.success.call(this,avatar)}}},_destory:function(avatar){var index=jQuery.inArray(avatar,this.avatars.custom);if(index!==-1){this.avatars.custom.splice(index,1)}else{throw new Error("JIRA.AvatarStore._destroy: Cannot remove avatar ["+avatar.getId()+"], "+"it might be a system avatar (readonly) or does not exist.")}},destroy:function(avatar,options){var instance=this;options=options||{};if(!avatar){throw new Error("JIRA.AvatarStore.destroy: Cannot delete Avatar that does not exist")}JIRA.SmartAjax.makeRequest({type:"DELETE",url:this.getRestUrlForAvatar(avatar),success:function(){instance._destory(avatar);if(avatar.isSelected()){instance.selectAvatar(instance.getById(instance.defaultAvatarId),options)}else{if(options.success){options.success.apply(this,arguments)}}},error:options.error})},getSelectedAvatar:function(){for(var i=0;i<this.avatars.custom.length;i++){if(this.avatars.custom[i].isSelected()){return this.avatars.custom[i]}}for(i=0;i<this.avatars.system.length;i++){if(this.avatars.system[i].isSelected()){return this.avatars.system[i]}}},_update:function(avatar){var instance=this;if(this.getById(avatar.getId())){jQuery.each(this.avatars.custom,function(i){if(this.getId()===avatar.getId()){instance.avatars.custom[i]=avatar}})}else{throw new Error("JIRA.AvatarStore._update: Cannot update avatar ["+avatar.getId()+"], "+"it might be a system avatar (readonly) or does not exist.")}},update:function(avatar,options){var instance=this;options=options||{};JIRA.SmartAjax.makeRequest({type:"PUT",url:this.getRestUrlForAvatar(avatar),error:options.error,success:function(){instance._update(avatar);if(options.success){options.success.apply(this,arguments)}}})},_add:function(avatar){if(avatar.isSystemAvatar()){this.avatars.system.push(avatar)}else{this.avatars.custom.push(avatar)}},createAvatarFromTemporary:function(instructions,options){var instance=this;options=options||{};if(this.restUpdateTempUrl){JIRA.SmartAjax.makeRequest({type:"POST",url:this._buildCompleteUrl(this.restUpdateTempUrl),data:JSON.stringify(instructions),contentType:"application/json",dataType:"json",success:function(data){if(!data){data={id:instance.TEMP_ID,isSelected:true}}var avatar=JIRA.Avatar.createCustomAvatar(data);instance._add(avatar);if(options.success){options.success.call(this,data)}},error:options.error})}},createTemporaryAvatar:function(fileInput,options){options=AJS.$.extend(true,{},options,{params:this.restParams});JIRA.AvatarUtil.uploadTemporaryAvatar(this.restCreateTempUrl,fileInput,options)},_refresh:function(avatars){var instance=this;instance.avatars.system=[];instance.avatars.custom=[];if(avatars.system){jQuery.each(avatars.system,function(i,descriptor){instance.avatars.system.push(JIRA.Avatar.createSystemAvatar(descriptor))})}if(avatars.custom){jQuery.each(avatars.custom,function(i,descriptor){instance.avatars.custom.push(JIRA.Avatar.createCustomAvatar(descriptor))})}},refresh:function(options){var instance=this;var tempAvatar=this.getById(instance.TEMP_ID);options=options||{};JIRA.SmartAjax.makeRequest({url:this._buildCompleteUrl(this.restQueryUrl),error:options.error,success:function(avatars){instance._refresh(avatars);if(tempAvatar){instance._add(tempAvatar)}if(options.success){options.success.apply(this,arguments)}}})},getAllAvatars:function(){return this.avatars},getAllSystemAvatars:function(){return this.avatars.system},getAllCustomAvatars:function(){return this.avatars.custom},getRestUrlForAvatar:function(avatar){return this._buildCompleteUrl(this.restSingleAvatarUrl+"/"+avatar.getId())}});