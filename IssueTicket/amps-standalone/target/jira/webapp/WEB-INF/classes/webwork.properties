
webwork.logging.debug=true
webwork.ui.theme=standard

# webwork.log4j.configfile=log4j.properties

webwork.log4j.configfile=

# WebWork configuration
# See webwork/default.properties for full list of properties that
# can be configured here
webwork.action.packages=com.atlassian.jira.web.action

#### ActionFactory
# Class WW should use to load configurations
webwork.action.factory=com.atlassian.jira.config.webwork.JiraActionFactory

# Flush JSP stream before doing include
# Set this to true if the JSP implementation does not support
# including subpages properly (e.g. Jetty)
webwork.jsp.include_flush=false

# Set this to your own source directory during development.
# This allows you to edit the pages while the server is running without loosing
# the changes when you re-deploy the application.
#file.resource.loader.path = /projects/webwork/src/resources/web

#### multipart parser
#webwork.multipart.parser=cos
#webwork.multipart.parser=pell
webwork.multipart.parser=custom
webwork.multipart.parser.class=com.atlassian.jira.web.JiraMultipartRequestWrapper
# use javax.servlet.context.tempdir by default

# Optionally set the directory to save File uploads. By default, JIRA uses the Servlet Context Temp Directory.
webwork.multipart.saveDir=
# Edit maxSize to change the attachment size limit
webwork.multipart.maxSize=10485760


# extension for actions
# this is due to the new action chaining.
webwork.action.extension=jspa

### i18n
webwork.i18n.encoding=UTF-8

webwork.ui.templateSuffix=jsp

#### Configuration
# Class WW should use to load configurations
# The DelegatingConfiguration wraps a ConfigurationInterface and allows us to change it out if need be, such as when the 
# system is reloaded and the plugin home directory changes and we need a fresh JiraPluginsConfiguration object to be
# used - this is necessary because the webwork Configuration object only allows the configuration instance to be set once
webwork.configuration=com.atlassian.jira.config.webwork.DelegatingConfiguration

## Factory for configuration
# ApplicationPropertiesConfiguration - This configuration first checks application properties, then delegates to the normal webwork configuration.
# JiraPluginsConfiguration - This configuration allows for plugins to have webwork actions in them - caches the plugin 
#                             webwork configurations for the plugins
webwork.configuration.class=com.atlassian.jira.config.webwork.ApplicationPropertiesConfiguration,com.atlassian.jira.config.webwork.JiraPluginsConfiguration

## Factory for creating objects
# This factory must implement webwork.util.injection.ObjectCreator
webwork.injection.objectcreator=com.atlassian.jira.web.util.component.PicoWebworkObjectCreator
# Factory for injecting objects
# webwork.injection.class = com.atlassian.jira.web.util.component.ProfilingWebworkInjector

# Maps action result codes to an actual view to be rendered. This implementation is aware of plugin events and clears
# cached mappings accordingly
webwork.viewmapping = com.atlassian.jira.web.dispatcher.PluginsAwareViewMapping